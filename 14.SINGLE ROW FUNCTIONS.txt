SINGLE ROW FUNCTIONS:
---------------------
-SINGLE ROW FUNCTIONS EXECUTE ROW BY ROW .
-IT TAKES AN INPUT(RECORD) PROCESSES AND EXECUTES , AND THEN 
 GENERATES AN OUTPUT.
-IF WE PASS n NUMBER OF INPUTS TO A SINGLE ROW FUNCTION IT RETURNS
 n NUMBER OF OUTPUTS .


1. LENGTH() : 
            	 SYNTAX: LENGTH('string') 

	1.LIST ALL THE NAMES THAT HAVE EXACTLY 4 CHARACTERS 
	WITHOUT USING LIKE OPERATOR.
	2.LIST THE NAME OF THE EMP ALONG WITH THEIR SALARY 
	IF EMPLOYEES EARN 3-DIGIT SALARY.
	3.LIST ALL THE NAMES ALONG WITH THEIR LENGTH FOR ALL
	THE MANAGERS.

2. CONCAT() :
 		SYNTAX: CONCAT('string1' , 'string2')
	
	1.WAQTD THE OUT PUT IN THE FOLLOWING FORMAT
		i. hello smith . 
		ii. hai allen how are you ?
3. UPPER() : 
		SYNTAX: UPPER( 'string' )
4. LOWER() :
		SYNTAX: LOWER( 'string' )
5. INITCAP() : 
		SYNTAX: INITCAP( 'string' )
6. REVERSE() :
		SYNTAX: REVERSE( 'string' )
	1. WAQTD THE NAMES THAT ARE A PALINDROME.

7. SUBSTR() :
 SYNTAX: SUBSTR('Original_string' , position [, length] )

	1.WAQTD NAMED OF THE EMPLOYEES IF THE NAME STARTS WITH
          'A' , 'S' , 'T' .
	2.WAQTD EXTRACT FIRST 3 CHARACTERS OF EACH NAME 
	3.WAQTD FRIST HALF OF EMPLOYEE NAMES 
	4.WAQTD TO EXTRACT SECOND HALF OF EMPLOYEE NAME .
	5.LIST THE NAMES OF THE EMPLOYEES IF THEIR NAME'S 3RD
	CHARACTER IS 'A' .
	6.WAQTD THE NAMES LEAVING THE FIRST AND THE LAST CHARACTER
	7.WAQTD NAMES OF THE EMPLOYEES BY REVERSING THE SECOND
	HALF OF THE NAME . 
		ex: i/p SMITH --> o/p SMHTI
	8.WAQTD NAMES OF THE EMPLOYEES BY REVERSING THE FIRST 
	AND THE SECOND HALF .
		ex: i/p SMITH --> o/p MSHTI
	9.WAQTD DETAILS OF THE EMPLOYEES IF A STRING 'MAN' IS 
          PRESENT AS FIRST 3 CHARACTERS IN THEIR DESIGNATIONS .
	10.WAQTD DETAILS OF THE EMPLOYEES IF A STRING 'MAN' IS 
          PRESENT AS LAST 3 CHARACTERS IN THEIR DESIGNATIONS .

8. INSTR():

SYNTAX:  
  INSTR( 'Original_str' , 'sub_str' , position  [,nth_occurrance])

1. WAQTD NAMES OF THE EMPLOYEE IF THE NAME CHAR 'A' PRESENT IN IT 
WITHOUT USING LIKE OPERATOR
ANS:  SELECT ENAME 
      FROM EMP 
      WHERE INSTR(ENAME , 'A' , 1, 1) > 0 ;

2. WAQTD DETAILS OF THE EMPLOYEE IF THE NAME HAS CHAR 'L' PRESENT
 ATLEAST 2 TIMES, WITHOUT USING LIKE OPERATOR.
ANS:  SELECT * 
      FROM EMP 
      WHERE INSTR(ENAME , 'L' , 1, 2) > 0 ;

3. WAQTD LIST OF EMPLOYEES WHO ARE WORKING IN A DESIGNATION THAT 
 HAS A STRING 'MAN' IN IT .
ANS:  SELECT * 
      FROM EMP 
      WHERE INSTR(JOB , 'MAN' , 1, 1) > 0 ;

4. WAQTD NAMES OF THE EMPLOYEES IF THEIR NAME HAS CHAR 'S' PRESENT
 EXACTLY ONCE.
ANS:  SELECT * 
      FROM EMP 
      WHERE INSTR(ENAME , 'S' , 1, 1) > 0 
            AND INSTR(ENAME ,'S',1,2)=0;

5. WAQTD NAMES OF THE EMPLOYEES IF THEIR NAME HAS CHAR 'R' PRESENT
 EXACTLY TWICE.
ANS:  SELECT * 
      FROM EMP 
      WHERE INSTR(ENAME , 'R' , 1, 2) > 0 
            AND INSTR(ENAME ,'R',1,3)=0;

Assignments :
*************

	1.WAQTD NAMES OF THE EMPLOYEES IF CHAR 'S' IS PRESENT
          IN THE NAME. 
	2.WAQTD NAMES OF THE EMPLOYEES IF CHAR 'A' IS PRESENT
          ATLEST 2 TIMES IN THE NAME.
	3.WAQTD NAMES OF THE EMPLOYEES IF CHAR 'R' IS PRESENT
          ATLEST 3 TIMES IN THE NAME.
	4.WAQTD NAMES OF THE EMPLOYEES IF STRING 'LL' IS PRESENT
          ATLEST ONCE TIMES IN THE NAME.
	5.WAQTD NAMES OF THE EMPLOYEES IF CHAR 'A' IS PRESENT
          EXACTLY 2 TIMES IN THE NAME
	6.WAQTD NAMES OF THE EMPLOYEES IF CHAR 'A' IS PRESENT
          EXACTLY 4 TIMES IN THE NAME
	7.WAQTD DETAILS OF THE EMPLOYEES IF A STRING 'MAN' IS 
          PRESENT IN THEIR DESIGNATIONS .
 


9. REPLACE():

SYNTAX: REPLACE('Original_str' , 'Substr' [,'newstr'])

	1.WATQD NAMES OF ALL THE EMPLOYEES BY REPLACING 'A' WITH 
          A '$' .
	2.WAQTD NAMES OF THE EMPLOYEES IF CHAR 'A' IS PRESENT
          EXACTLY 2 TIMES IN THE NAME
	3.WAQTD NAMES AND NUMBER OF TIMES CHAR 'A' PRESENT IN 
          EACH NAME .
	4.WAQTD NUMBER OF TIMES CHAR 'S' PRESENT IN 
           QSPIDERS/JSPIDERS.
	5.WAQTD NUMBER OF TIMES CHAR 'S' PRESENT IN SUCCESS.
	6.WAQTD NUMBER OF TIMES CHAR 'E' PRESENT IN ENGINEERING.



10. MOD()
 	SYNTAX:  MOD(M,N) ;


11. ROUND()

	SYNTAX:  ROUND(NUMBER[,SCALE])

12. TRUNC()

	SYNTAX: TRUNC(NUMBER[,SCALE])

 DATE SRF 
-------------------------------
NOTE :  i.SYSDATE  or CURRENT_DATE 
       ii. SYSTIMESTAMP

13.MONTHS_BETWEEN() :

 	SYNTAX: MONTHS_BETWEEN( DATE1 , DATE2) 

14.LAST_DAY() :

	SYNTAX: LAST_DAY( DATE ) 


CONVERSION SRF 
----------------------------------
16.TO_DATE()

	SYNTAX: TO_DATE('date_str')

16.TO_CHAR()

	SYNTAX: TO_CHAR( DATE  , 'format_models' )

FORMAT_MODELS: ( ex:  02-dec-19 )
-----------------
1. YEAR 	2.YYYY		3.YY
4. MONTH	5.MON		6.MM
7. DAY		8.DY		9.DD		10.D
11.HH24		12. HH12	13.MI 		14.SS

	1. WAQTD THE DATE IN US FORMAT  (MM/DD/YYYY)
	2. WAQTD THE DATE USING CHINA FORMAT . ( YYYY/MM/DD )
	3. DISPLAY THE TIME .


17. NVL(): ( NULL VALUE LOGIC ) 

The NVL() function is used to replace NULL values with a specified value.
If the first argument is NULL, it returns the second argument.

	SYNTAX: NVL ( ARG1 , ARG2 )

18. NVL2() :

The NVL2() function checks if the first argument is NULL. 
If it is not NULL, it returns the second argument; otherwise, it returns the third argument.

	SYNTAX: NVL2 ( ARG1 , ARG2 , ARG3 ) 

19.COALESCE() :

 	SYNTAX :  COALESCE ( ARG1 , ARG2 , ARG3...... ) 

20.NULLIF()

SYNTAX: NULLIF ( ARG1 , ARG2 )

21.IFNULL() --------------------> MYSQL 

SYNTAX:      IFNULL ( ARG1 , ARG2 )


22. CASE() :

	SYNTAX: CASE WHEN condition_1 THEN 'result_1'
		     WHEN condition_2 THEN 'result_2'
			.
			.
			.
		     WHEN condition_N THEN 'result_N'
		     [ELSE 'default_result'] 
		     END

23. RANK() :

Rank function is used to Assigns a rank to each row.
If the same rank is avaliableRank function it will creates gap or skips the ranks 

	SYNTAX:  RANK() OVER ( [PARTITION BY COL_NAME/EXP ]
                               ORDER BY COL_NAME [ASC]/DESC)


24. DENSE_RANK() :

Dense_Rank function is used to Assigns a rank to each row.
If the same rank is available Dense_Rank function it will not creates gaps or skips the ranks


SYNTAX: DENSE_RANK() OVER ( [PARTITION BY COL_NAME/EXP ]
                               ORDER BY COL_NAME [ASC]/DESC)


*******************************************************************************************************************



25.TRIM():

SYNTAX: 

     TRIM( LEADING/TRAILING/BOTH 'CHAR' FROM 'string')

      MAIL_ID :   ROHANSINGHROO@GMAIL.COM   

26. ABS()
27. POWER()
28. SQRT()

29.EXTRACT() :

	SYNTAX: EXTRACT( DAY / MONTH / YEAR  from  DATE )

30.ADD_MONTHS():

	syntax:ADD_MONTHS( DATE , no_of_months )
		1.WAQTD DETAILS OF THE EMPLOYEE HIRED AFTER 
                  TWO YEARS OF THE FIRST EMPLOYEE .
		2.WAQTD DETAILS OF THE EMPLOYEE HIRED BEFORE 
                  THREE YEARS OF THE LAST EMPLOYEE .





