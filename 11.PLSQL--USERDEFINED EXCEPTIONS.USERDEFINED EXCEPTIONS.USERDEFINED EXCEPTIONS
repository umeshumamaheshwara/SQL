2. USERDEFINED EXCEPTIONS

WE CAL ALSO CREATE OUR OWN EXCEPTION NAMES & ALSO RAISE WHENEVER NECESSARY.
THESE TYPES OF EXCEPTIONS ARE CALLED USER DEFINED EXCEPTION.

STEP1. DECLARE
STEP2. RAISE
STEP3. HANDLING EXCEPTION

STEP1. DECLARE
-----------------

IN DECLARE SECTION OF THE PL/SQL PROGRAM WE ARE DEFINING OUR OWN EXCEPTIONNAME USING EXCEPTION TYPE.

SYNTAX:

USERDEFINEDEXCEPTIONNAME   EXCEPTION;

EX: DECLARE

A EXCEPTION;

STEP2. RAISE
-----------------
WHENEVER NECESSARY RAISE USER DEFINED EXCEPTION EITHER IN  EXECUTABLE SECTION OR IN EXCEPTION SECTION, IN THIS CASE WE ARE USING RAISE KEYWORD.

SYNTAX:

RAISE USERDEFINEDEXCEPTIONNAME;


IN THIS CASE ORACLE SERVER ONLY RAISE THAT EXCEPTION

STEP3. HANDLING EXCEPTION
-----------------------------

WE CAN ALSO HANDLE USERDEFINED EXCEPTIONS AS SAME AS PREDEFINED EXCEPTION USING PREDEFINED HANDLER.
SYNTAX:
WHEN USERDEFINEDEXCEPTIONNAME1 THEN
STATEMENTS;
WHEN USERDEFINEDEXCEPTIONNAME2 THEN
STATEMENTS;
_______________________
________________________
WHEN OTHER THEN
STATEMENTS;

EX:

DECLARE
V_SAL NUMBER(10);
Z EXCEPTION;
V_EMPNO NUMBER:=&EMPNO;
BEGIN
SELECT SAL INTO V_SAL
FROM EMP
WHERE EMPNO=V_EMPNO;
IF V_SAL>2000 THEN
RAISE Z;
ELSE
UPDATE EMP
SET SAL=SAL+100
WHERE EMPNO=V_EMPNO;
END IF;
EXCEPTION
WHEN Z THEN
DBMS_OUTPUT.PUT_LINE('SALARY ALREADY HIGH');
END;
/


EXAMPLE:------
        
         DECLARE
    	   num1 NUMBER := &NO1;
    	   num2 NUMBER := &NO2;

    	   e_negative_result EXCEPTION; -- 1. Declare

	BEGIN
    	    IF (num1 - num2) < 0 THEN
        	RAISE e_negative_result; -- 2. Raise
            ELSE
        	DBMS_OUTPUT.PUT_LINE('Result: ' || (num1 - num2));
    	END IF;

	EXCEPTION
    	WHEN e_negative_result THEN -- 3. Handle
        	DBMS_OUTPUT.PUT_LINE('❌ Result is negative. Operation not allowed.');
	END;
	/





RAISE_APPLICATION_ERROR();
------------------------------

IF YOU WANT TO DISPLAY USER DEFINED EXCEPTION MESSAGE IN MORE DESCRIPTIVE FROM THEN WE ARE USING RAISE_APPLICATION_ERROR() I.E. THIS FUNCTION IS USED  TO DISPLAY DEFINED EXCEPTION MESSAGE AS SAME AS ORACLE ERROR DISPLAYED FORMET. THIS FUNCTION IS USED IN EITHER EXECUTABLE SECTION OR IN EXCEPTION SECTION.

SYNTAX:
RAISE_APPLICATION_ERROR(ERROR NO , MESSAGE );

ERROR_NUMBER---> -20999 TO -20000
MESSAGE ----> UPTO 512 CHARACTERS

EX:
DECLARE
V_SAL NUMBER(10);
Z EXCEPTION;
V_EMPNO NUMBER:=&EMPNO;
BEGIN
SELECT SAL INTO V_SAL
FROM EMP
WHERE EMPNO=V_EMPNO;
IF V_SAL>2000 THEN
RAISE Z;
ELSE
UPDATE EMP
SET SAL=SAL+100
WHERE EMPNO=V_EMPNO;
END IF;
EXCEPTION
WHEN Z THEN
RAISE_APPLICATION_ERROR(-20101,'SALARY ALREADY HIGH');
END;
/


Write a PL/SQL block that declares a user-defined exception called insufficient_balance
and raises it when a withdrawal amount exceeds the balance

declare 
 v_withdraw_amt number :=&amt ;
 v_empno number :=&empno ;
 v_old_balance number ;
 z exception ;
begin  
 select sal into v_old_balance
 from emp
 where empno = v_empno;
   if v_old_balance <= v_withdraw_amt then
     raize z ;
   else 
     update emp
     set sal=v_old_balance- v_withdraw_amt 
     where empno =v_empno;
      dbms_output.put_line('total balance :'||v_old_balance- v_withdraw_amt);
  end if;
exception 
 when z then 
   dbms_output.put_line(' transactation faild due to insufficient_balance' :||v_old_balance);
end ;
