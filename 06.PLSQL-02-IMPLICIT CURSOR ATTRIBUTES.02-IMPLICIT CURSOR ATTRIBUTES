

IMPLICIT CURSOR ATTRIBUTES:
---------------------------

Every IMPLICIT Cursor Having Following Four Attributes:

1) %FOUND
2) %NOTFOUND
3) %ISOPEN
4) %ROWCOUNT

All These Cursor Attributes Using Along With Cursor Name Only.

SYNTAX: 
        SQL%Attribute_Name 

üî∏ 1) SQL%FOUND

  ‚úÖ Returns TRUE if the last SQL statement affected at least one row.
  üîπ Used after: SELECT INTO, UPDATE, DELETE, INSERT
  üîπ Returns FALSE if no rows were affected/found.

   IF SQL%FOUND THEN
     DBMS_OUTPUT.PUT_LINE('Record found!');
   END IF;

Example:

BEGIN
   UPDATE emp
   SET sal = sal + 500
   WHERE deptno=10;
    Rollback ;
   IF SQL%FOUND THEN
      DBMS_OUTPUT.PUT_LINE('‚úÖ Record found and updated successfully!');
   ELSE
      DBMS_OUTPUT.PUT_LINE('‚ùå No record found with the given empno.');
   END IF;
END;
/

--------------------------------------------------------------------------------------------
üî∏ 2) SQL%NOTFOUND

  ‚úÖ Returns TRUE if the last SQL statement did not affect any row.
  üîπ Used after: SELECT INTO, UPDATE, DELETE, INSERT
  üîπ Exact opposite of SQL%FOUND.

  IF SQL%NOTFOUND THEN

     DBMS_OUTPUT.PUT_LINE('No matching record found.');
  END IF;

Example :

BEGIN
   UPDATE emp SET sal = sal + 100 WHERE empno = 7369;
   ROLLBACK;  -- optional: undoes the update

   IF SQL%NOTFOUND THEN
      DBMS_OUTPUT.PUT_LINE('No rows were updated.');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Update successful. At least one row was affected.');
   END IF;
END;
/

‚ùå‚ùå‚ùå Dont Do it.

Declare 
 v_ename varchar(20);
BEGIN
   select ename into v_ename 
   from emp
   WHERE empno = 739;
   IF SQL%notfound THEN
      DBMS_OUTPUT.PUT_LINE('No employee found');
   END IF;

END;
/

o/p :

Declare
*
ERROR at line 1:
ORA-01403: no data found
ORA-06512: at line 4

 Notes :
   Dont use the select Into clause to check this Because alway internal exception execute first
--------------------------------------------------------------------------------------------
üî∏ 3) SQL%ISOPEN

  ‚úÖ Always returns FALSE for implicit cursors, because they automatically close after execution.
  üîπ Use this mainly with explicit cursors.

  -- For implicit: always FALSE
  IF SQL%ISOPEN THEN
     DBMS_OUTPUT.PUT_LINE('Cursor is open');  -- Not valid for implicit
  END IF;

Example :

 BEGIN
   UPDATE emp SET sal = sal + 100 WHERE empno = 7369;

   IF SQL%ISOPEN THEN
      DBMS_OUTPUT.PUT_LINE('Cursor is open');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Cursor is closed');  -- Always prints this
   END IF;
END;
/
--------------------------------------------------------------------------------------------
üî∏ 4) SQL%ROWCOUNT

  ‚úÖ Returns the number of rows affected by the last DML statement.

  DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' rows updated.');

example :

  BEGIN
     UPDATE emp SET sal = sal + 100 WHERE deptno = 30;
       DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' row(s) updated.');
  END;
  /






