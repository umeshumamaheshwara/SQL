PARAMETRIZED CURSOR :

--> We Can Also Pass Parameters To The Cursor Same Like A Subprograms In Parameters
--> These Type Of The Cursor Is Also Called As Parametrized Cursor

SYNTAX:

CURSOR CURSOR_NAME (PARAMETER_NAME DATATYPE) IS SELECT *  FROM TABLE_NAME WHERE COLUMN_NAME = PARAMETER_NAME ;

SYNTAX:

OPEN CURSOR_NAME (ACTUAL PARAMETERS value);

EXAMPLE :
*********
DECLARE
     I EMP%ROWTYPE ;
     CURSOR C1(P_DEPTNO NUMBER) IS SELECT * 
     FROM EMP WHERE DEPTNO=P_DEPTNO;
BEGIN
   OPEN C1(10);
     DBMS_OUTPUT.PUT_LINE('EMPLOYEES ARE WORKING IN DEPTNO 10');
      LOOP
         FETCH C1 INTO I ;
          EXIT WHEN C1%NOTFOUND ;
            DBMS_OUTPUT.PUT_LINE (I. ENAME|| ' ' ||I.SAL);
      END LOOP;
    CLOSE C1;
END ;
/


NOTES :
Whenever We Are Passing Formal Parameter To The Cursor ,Procedure ,Function , We Cannot Specify Datatype Size In Formal Parameter Declaration .

EXAMPLE:
Write A Pl/Sql Parameterized Cursor Program To Display Employees Working As Manager Or Analyst From The Emp Table & Also Produce This Report Statically
DECLARE
    I EMP%ROWTYPE ;
    CURSOR C1(P_JOB VARCHAR2) 
    IS 
    SELECT * FROM EMP WHERE JOB=P_JOB ;
BEGIN
    OPEN C1('MANAGER');
       DBMS_OUTPUT.PUT_LINE('EMPLOYEES WORKING AS MANAGER');
         LOOP
           FETCH C1 INTO I ;
           EXIT WHEN C1%NOTFOUND;
               DBMS_OUTPUT.PUT_LINE(I.ENAME);
         END LOOP;
      CLOSE C1;
   OPEN C1('ANALYST');
       DBMS_OUTPUT.PUT_LINE('EMPLOYEES WORKING AS ANALYST');
        LOOP
           FETCH C1 INTO I ;
           EXIT WHEN C1%NOTFOUND;
             DBMS_OUTPUT.PUT_LINE(I.ENAME);
        END LOOP;
   CLOSE C1;
END ;
/
NOTE :
Before We Are Reopening The Cursor We Must Close The Cursor Properly Otherwise Oracle Server Returns An Error Cursor Already Open
NOTE :
If We Are Try To Close The Cursor Without Opening The Cursor Oracle Server Returns An Error
ORA-1001 : INVALID CURSOR

EXAMPLE:
DECLARE
    CURSOR C1(P_DEPTNO NUMBER) 
    IS 
    SELECT * FROM EMP WHERE DEPTNO=P_DEPTNO ;
BEGIN
     DBMS_OUTPUT.PUT_LINE('EMPLOYEES ARE WORKING IN DEPTNO 10');
      FOR I IN C1(10)
        LOOP
           DBMS_OUTPUT.PUT_LINE(I.ENAME|| ' ' ||I.SAL);
       END LOOP ;
END ;
/

NOTES :
We Can Pass The Default Values Using Either Default Or  ‘ := ‘ Operators
SYNTAX :
PARAMETER_NAME DATATYPE DEFAULT ACTUAL_VALUE
OR
PARAMETER_NAME DATATYPE :=  ACTUAL_VALUE
EXAMPLE:
DECLARE
CURSOR C1(P_DEPTNO NUMBER DEFAULT 20) 
IS SELECT * FROM EMP WHERE DEPTNO=P_DEPTNO ;
BEGIN
DBMS_OUTPUT.PUT_LINE('EMPLOYEES ARE WORKING IN DEPTNO 20');
   FOR I IN C1()
      LOOP
DBMS_OUTPUT.PUT_LINE(I.ENAME|| ' ' ||I.SAL);
      END LOOP ;
END ;
/
OR
DECLARE
      CURSOR C1(P_DEPTNO NUMBER:=20) IS SELECT * FROM EMP
      WHERE DEPTNO=P_DEPTNO ;
BEGIN
      DBMS_OUTPUT.PUT_LINE('EMPLOYEES ARE WORKING IN DEPTNO 20');
   FOR I IN C1()
      LOOP
DBMS_OUTPUT.PUT_LINE(I.ENAME|| ' ' ||I.SAL);
      END LOOP ;
END ;
/




EXAPMLE :

Write A Pl/Sql Program To Retrive Differtent Deptno From Deptno Table Using Cursor And Also Pass The Deptno Into Another Parameterized Cursor To Retrive Employee Details For The Corresponding Deptno

DECLARE
    CURSOR C1 IS SELECT DEPTNO FROM DEPT  ;
    CURSOR C2(P_DEPTNO NUMBER) 
    IS SELECT * FROM EMP WHERE DEPTNO =P_DEPTNO ;
BEGIN
     FOR I IN C1
        LOOP
          DBMS_OUTPUT.PUT_LINE('_____DEPTNO IS :_____'|| I.DEPTNO);
            FOR J IN C2(I.DEPTNO)
              LOOP
               DBMS_OUTPUT.PUT_LINE(J.ENAME|| ' '||J.DEPTNO ||'   '||J.SAL);
             END LOOP;
       END LOOP;
END ;
/

Write A Plsql Cursor Program To Modify Salaries Of Employees From Emp Table Based On Following Condition :
1)	IF JOB = ‘CLERK’ THEN INCREMENT SAL 100
2)	IF JOB =’SALESMAN’ THEN DECREMENT SAL 200
3)	IF JOB = ‘ANALYST’ THEN INCREMENT SAL 100

DECLARE
    CURSOR C1 IS SELECT * FROM EMP ;
    I EMP%ROWTYPE ;
BEGIN
    OPEN C1 ;
       LOOP
         FETCH C1 INTO I ;
         EXIT WHEN C1%NOTFOUND ;
           IF I.JOB='CLERK' THEN
              UPDATE EMP
              SET SAL =SAL+101
              WHERE EMPNO=I.EMPNO;
          ELSIF I.JOB='SALESMAN' THEN
             UPDATE EMP
             SET SAL =SAL-201
             WHERE EMPNO=I.EMPNO;
          ELSIF I.JOB='ANALYST' THEN
             UPDATE EMP
             SET SAL =SAL+101
             WHERE EMPNO=I.EMPNO;
         END IF ;
       END LOOP ;
   CLOSE C1;
END ;
/
