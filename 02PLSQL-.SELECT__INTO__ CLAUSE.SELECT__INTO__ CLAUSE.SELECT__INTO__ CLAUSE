SELECT _____ INTO _____ CLAUSE 

 *) The SELECT ... INTO ... clause is used in PL/SQL to fetch data from a table and store it into PL/SQL variables.
 *) This is different from normal SQL, which just retrieves data.
 *) In PL/SQL, we use this clause inside a block to assign database values directly to variables.


     SYNTAX: 
	SELECT column1, column2, ...
	INTO variable1, variable2, ...
	FROM table_name
	WHERE condition;

 
EXAMPLE :
  1) WRITE A PL/SQL PROGRAM DISPLAY NAME AND SALARY OF THE EMPLOYEES AND GET THE EMPNO FORM THE USER.
DECLARE 
     V_NAME VARCHAR(20);
     V_SAL NUMBER ;
BEGIN 
     SELECT ENAME ,SAL INTO V_NAME ,V_SAL 
     FROM EMP
     WHERE EMPNO = &EMPNO ;
      DBMS_OUTPUT.PUT_LINE('MY NAME IS : '||V_NAME || ' AND MY SALARY IS : ' ||V_SAL);
END;
/
     O/P:
	ENTER VALUE FOR EMPNO: 7902
	MY NAME IS : FORD AND MY SALARY IS : 3000

  2)  WRITE A PL/SQL PROGRAM DISPLAY NAME AND job OF THE EMPLOYEES  who is earning 1100 

DECLARE 
     V_NAME VARCHAR(20);
     V_JOB VARCHAR(20) ;
BEGIN 
     SELECT ENAME ,JOB INTO V_NAME ,V_JOB
     FROM EMP
     WHERE SAL=1100 ;
      DBMS_OUTPUT.PUT_LINE('MY NAME IS : '||V_NAME || ' AND MY JOB IS : ' ||V_JOB);
END;
/

  3)  WRITE A PL/SQL PROGRAM DISPLAY NAME AND job OF THE EMPLOYEES  who is earning 1000 

DECLARE 
     V_NAME VARCHAR(20);
     V_JOB VARCHAR(20) ;
BEGIN 
     SELECT ENAME ,JOB INTO V_NAME ,V_JOB
     FROM EMP
     WHERE SAL=1000 ;
      DBMS_OUTPUT.PUT_LINE('MY NAME IS : '||V_NAME || ' AND MY JOB IS : ' ||V_JOB);
END;
/

  4)  WRITE A PL/SQL PROGRAM DISPLAY NAME AND job OF THE EMPLOYEES  who is earning 3000 

DECLARE 
     V_NAME VARCHAR(20);
     V_JOB VARCHAR(20) ;
BEGIN 
     SELECT ENAME ,JOB INTO V_NAME ,V_JOB
     FROM EMP
     WHERE SAL=3000 ;
      DBMS_OUTPUT.PUT_LINE('MY NAME IS : '||V_NAME || ' AND MY JOB IS : ' ||V_JOB);
END;
/


Notes:
  This clause must return exactly one row.
  If no rows are returned → NO_DATA_FOUND exception.
  If more than one row is returned → TOO_MANY_ROWS exception.


NOTES on NOT NULL and CONSTANT in PL/SQL:

✅ Rule:
	Whenever we use the NOT NULL or CONSTANT constraint in a PL/SQL variable declaration, we must assign a value at the time of declaration itself.
	If not, the compiler will throw an error.

EXAMPLE:

DECLARE 
   A NUMBER(10) NOT NULL :=60;
   B CONSTANT NUMBER (10):=50;
BEGIN
   DBMS_OUTPUT.PUT_LINE(A);
   DBMS_OUTPUT.PUT_LINE(B);
END;
/

NOTES :
We can also use default keyword in place a assignment operator , in declare  section of the pl/sql.

EXAMPLE:

DECLARE 
   A NUMBER(10) DEFAULT 60;
BEGIN
   DBMS_OUTPUT.PUT_LINE(A);
END;
/


1) WAQTD MAXIMUM SALARY OF THE EMPLOYEE 
DECLARE 
   V_MAX NUMBER(5) ;
BEGIN 
   SELECT MAX(SAL) INTO V_MAX 
   FROM EMP;
      DBMS_OUTPUT.PUT_LINE(V_MAX);
 END ;
/ 

GREATEST Keyword in Oracle SQL / PL/SQL

	The GREATEST function is used to return the largest (greatest) value from a list of two or more expressions.

✅ Syntax:

	GREATEST(expr1, expr2, ..., exprN)

SELECT GREATEST(100, 300, 50, 200) AS max_val FROM dual;

SELECT GREATEST('Apple', 'Orange', 'Banana') AS result FROM dual;

Notes:
 It compares all the expressions and returns the one with the highest value.
 Works with numbers, dates, characters, etc.
 All expressions must be of compatible data types.

⚠️ Important Notes:
   If any argument is NULL, the result will be NULL (unless you handle it with NVL).
   All expressions must be of same or compatible types.

SELECT GREATEST(100, 300, 50, null) AS max_val FROM dual;

 WAQTD THE GRATEST DIGIT AMONG THIS  NUMBER 20,30,10 
  
DECLARE 
    A NUMBER(2) ;
    B NUMBER(2) ;
    C NUMBER(2) ;
    D NUMBER(2);
BEGIN 
     A := 20;
     B := 30;
     C := 10;
     D := GREATEST(A,B,C);
     DBMS_OUTPUT.PUT_LINE(D);
END ;
/

LEAST Keyword in Oracle SQL / PL/SQL:

The LEAST function is used to return the smallest (least) value from a list of two or more expressions.

✅ Syntax:

	LEAST(expr1, expr2, ..., exprN)

SELECT LEAST(100, 300, 50, 200) AS min_val FROM dual;

 WAQTD THE SMALLEST DIGIT AMONG THIS  NUMBER 20,30,10 

DECLARE 
    A NUMBER(2) ;
    B NUMBER(2) ;
    C NUMBER(2) ;
    D NUMBER(2);
BEGIN 
     A := 20;
     B := 30;
     C := 10;
     D := LEAST(A,B,C);
          DBMS_OUTPUT.PUT_LINE(D);
END ;
/


ASSIGNMETS :

 1) Write a PL/SQL block to retrieve the employee name, job title, and salary for the employee with EMPNO 7839.

 DECLARE 
 
    NAME EMP.ENAME%TYPE;
    EJOB EMP.EJOB%TYPE;
    ESAL EMP.SAL%TYPE;
 BEGIN 
    SELECT ENAME,JOB ,SAL INTO NAME,EJOB,SAL
    FROM EMP
    WHERE EMPNO = 7839 ;
    DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||ESAL);
 END;
 / 

 2) Develop a PL/SQL block to fetch the employee number, name, and department number for the employee whose salary exceeds 2000, job designation contains 'MAN', and who belongs to department 10.

DECLARE 
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  EJOB EMP.JOB%TYPE;
  DNUM EMP.DEPTNO%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,JOB,DEPTNO INTO NUM,NAME,EJOB,DNUM
  FROM EMP 
  WHERE  SAL > 2000 AND JOB LIKE('%MAN') AND DEPTNO = 10 ;
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||EJOB||' '||DNUM);
END;
/ 


 3) Construct a PL/SQL block to obtain the employee number, name, and hire date for the employee with EMPNO 7782.

 DECLARE
   NUM EMP.EMPNO%TYPE;
   NAME EMP.ENAME%TYPE;
   HDATE EMP.HIREDATE%TYPE;
 BEGIN
   SELECT EMPNO,ENAME,HIREDATE  INTO NUM,NAME,HDATE
   FROM EMP
   WHERE EMPNO = 7782;
   DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||HDATE);
 END;
 /

 4) Write a PL/SQL block to identify the employee number, name, and commission of the employee receiving the highest commission.

 DECLARE 
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  MISSION EMP.COMM%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,COMM INTO NUM,NAME,MISSION
  FROM EMP
  WHERE COMM IN (SELECT MAX(COMM) FROM EMP);
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||MISSION);
END;
/ 

 5) Create a PL/SQL block to retrieve the employee number, name, and job title for the employee whose job is 'SALESMAN' and whose name ends with the letter 'D'.

 DECLARE
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  EJOB EMP.JOB%TYPE;
BEGIN
  SELECT EMPNO,ENAME,JOB  INTO NUM,NAME,EJOB
  FROM EMP
  WHERE JOB = 'SALESMAN' AND ENAME LIKE ('%D');
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||EJOB);
END;
/


 6) Develop a PL/SQL block to fetch the employee number, name, and salary of the employee earning the second-highest salary.

BEGIN
  FOR REC IN (
    SELECT EMPNO, ENAME, SAL
    FROM EMP
    WHERE SAL = (
      SELECT MAX(SAL)
      FROM EMP
      WHERE SAL < (
        SELECT MAX(SAL) FROM EMP
      )
    )
  ) LOOP
    DBMS_OUTPUT.PUT_LINE(REC.EMPNO || ' ' || REC.ENAME || ' ' || REC.SAL);
  END LOOP;
END;
/


OR 

BEGIN 
  FOR REC IN ( SELECT EMPNO, ENAME, SAL FROM EMP E1 WHERE (SELECT COUNT(DISTINCT SAL) FROM EMP E2 WHERE E1.SAL <= E2.SAL) = 2) LOOP
   DBMS_OUTPUT.PUT_LINE(REC.EMPNO || ' ' || REC.ENAME || ' ' || REC.SAL);
  END LOOP;
END;
/



 7) Write a PL/SQL block to retrieve the employee number, name, and department number for the employee with the earliest hire date in the organization.

DECLARE
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  DEPT EMP.DEPTNO%TYPE;
BEGIN
  SELECT EMPNO,ENAME,DEPTNO  INTO NUM,NAME, DEPT
  FROM EMP
  WHERE HIREDATE IN (SELECT MIN(HIREDATE) FROM EMP);
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||DEPT);
END;
/


 8) Construct a PL/SQL block to obtain the employee number, name, and salary of the highest-paid employee in department 30.


DECLARE 
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  ESAL EMP.SAL%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,SAL INTO NUM,NAME,ESAL
  FROM EMP 
  WHERE  SAL IN (SELECT MAX(SAL) FROM EMP WHERE DEPTNO = 30);
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||ESAL);
END;
/ 


 9) Write a PL/SQL block to fetch the employee number, name, and manager ID for the employee with EMPNO 7566.

DECLARE
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  MGRID EMP.MGR%TYPE;
BEGIN
  SELECT EMPNO, ENAME, MGR INTO NUM, NAME, MGRID
  FROM EMP
  WHERE EMPNO = 7566;
  DBMS_OUTPUT.PUT_LINE(NUM || ' ' || NAME || ' ' || MGRID);
END;
/




 10) Create a PL/SQL block to retrieve the employee number, name, and job title for the employee designated as 'MANAGER' and hired in the month of April.



 11) Write a PL/SQL block to fetch the employee number, name, and salary of the employee named 'KING'.

DECLARE 
    NUM EMP.EMPNO%TYPE;
    NAME EMP.ENAME%TYPE;
    ESAL EMP.SAL%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,SAL INTO NUM,NAME,ESAL
  FROM EMP
  WHERE ENAME = 'KING';
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||ESAL);
END;
/ 


 12) Develop a PL/SQL block to retrieve the employee number, name, and job title for the employee who was most recently hired.

DECLARE 
    NUM EMP.EMPNO%TYPE;
    NAME EMP.ENAME%TYPE;
    HDATE EMP.HIREDATE%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,HIREDATE INTO NUM,NAME,HDATE
  FROM EMP
  WHERE HIREDATE IN (SELECT MAX(HIREDATE) FROM EMP);
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||HDATE);
END;
/


 13) Construct a PL/SQL block to obtain the employee number, name, and department number for the employee earning a salary of exactly 800.


DECLARE 
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  DEP DEPT.DNAME%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,DNAME INTO NUM,NAME,DEP
  FROM EMP E , DEPT D
  WHERE E.DEPTNO = D.DEPTNO AND  SAL = 800;
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||DEP);
END;
/ 


 14) Write a PL/SQL block to fetch the employee number, name, and commission for the employee receiving a commission of 1400.

DECLARE 
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  MISSION EMP.COMM%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,COMM INTO NUM,NAME,MISSION
  FROM EMP
  WHERE COMM = 1400;
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||MISSION);
END;
/ 


 15) Create a PL/SQL block to retrieve the employee number, name, and job title for the employee who does not report to any manager (i.e., MGR is NULL).

DECLARE 
  NUM EMP.EMPNO%TYPE;
  NAME EMP.ENAME%TYPE;
  EJOB EMP.JOB%TYPE;
BEGIN 
  SELECT EMPNO,ENAME,JOB INTO NUM,NAME,EJOB
  FROM EMP
  WHERE MGR IS NULL;
  DBMS_OUTPUT.PUT_LINE(NUM ||' '||NAME||' '||EJOB);
END;
/ 
