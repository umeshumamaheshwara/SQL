EXCEPTION:
------------

Exception is a runtime error that occurs while the PL/SQL program is executing.
PL/SQL provides a way to handle these errors using an EXCEPTION section.
This helps prevent program crashes and allows custom error messages or actions.


THERE ARE 2 TYPES OF EXCEPTIONS SUPPORTED BY ORACLE

1.  	PREDEFINED EXCEPTIONS
2.  	USER-DEFINED EXCEPTIONS


1. PREDEFINED EXCEPTIONS
ORACLE DEFINED 20 PREDEFINED EXCEPTIONS NAMES FOR REGULARLY OCCURED ERRORS. 
WHENEVER THESE ERRORS OCCURE USE APPROPRIATE EXCEPTIONNAME IN EXCEPTION HANDLER.

SYNTAX:

DECLARE
   -- Declarations (variables, constants, etc.)
BEGIN
   -- Executable statements
EXCEPTION
   WHEN exception_name THEN
      -- Handling code
END;
/




PREDEFINED EXCEPTIONS
---------------------

I) NO_DATA_FOUND
II) TOO_MANY-ROWS
III) ZERO_DIVIDE
IV) INVALID_CURSOR
V) CURSOR_ALREADY-OPEN
VI) INVALID_NUMBER
VII) VALUE_ERROR


ðŸ”¹ I) NO-DATA-FOUND
----------------

ðŸ“˜ Definition:
This exception is raised when a SELECT ... INTO statement does not return any rows.
Oracle throws the error: ORA-01403: no data found
To handle this error gracefully, we use the NO_DATA_FOUND predefined exception in the EXCEPTION block.

EX.

DECLARE
 V_ENAME  VARCHAR2 (10);
 V_SAL NUMBER(10);
BEGIN
 SELECT ENAME, SAL INTO V_ENAME, V_SAL
 FROM EMP 
 WHERE EMPNO = &NO;
  DBMS_OUTPUT.PUT_LINE (V_ENAME ||''|| V_SAL);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
   DBMS_OUTPUT.PUT_LINE ('EMPLOYEE DOES NOT EXIST');
END;
/

(OUTPUT) =>ENTER VALUE FOR NO: 7902
FORD 4000
=>/

ENTER VALUE FOR NO: 9999
EMPLOYEE DOES NOT EXIST

ðŸ”¹ II) TOO_MANY_ROWS
    ------------------

ðŸ“˜ Definition:
This exception is raised when a SELECT ... INTO statement returns more than one row.
Oracle throws the error: ORA-01422: exact fetch returns more than requested number of rows
To handle this error, we use the predefined exception TOO_MANY_ROWS in the EXCEPTION block.


DECLARE
V_SAL NUMBER (10);
BEGIN
SELECT SAL INTO V_SAL FROM EMP;
DBMS_OUTPUT.PUT_LINE (V_SAL);
EXCEPTION
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('NOT TO RETURN MORE ROWS');
END;
/


ðŸ”¹ III) ZERO_DIVIDE
--------------------

ðŸ“˜ Definition:
This exception is raised when a number is divided by zero during execution.
Oracle returns the error: ORA-01476: divisor is equal to zero
To handle this error, we use the predefined exception ZERO_DIVIDE in the EXCEPTION block.

EX:

DECLARE
  DIVIDENT  NUMBER(10);
  DIVISOR NUMBER (10);
  C NUMBER (10);
BEGIN
  DIVIDENT :=5;
  DIVISOR:=0;
  C:= DIVIDENT/DIVISOR ;
   DBMS_OUTPUT.PUT_LINE (C);
EXCEPTION
  WHEN ZERO_DIVIDE THEN 
    DBMS_OUTPUT.PUT_LINE ('DIVISOR CANNOT BE ZERO');
END;
/



ðŸ”¹  IV) INVALID CURSOR

ðŸ“˜ Definition:
This exception is raised when you try to perform an invalid operation on a cursor.
Common cases include:
Trying to close a cursor that was never opened
Trying to fetch or reference a cursor that is not open

Oracle throws the error:ORA-01001: invalid cursor
To handle this error, we use the predefined exception INVALID_CURSOR in the EXCEPTION block.

EX:

DECLARE
 CURSOR C1 IS SELECT * FROM EMP;
 I EMP%ROWTYPE;
BEGIN
  LOOP
   FETCH C1 INTO I;
   EXIT WHEN C1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(I.ENAME||' '|| I.SAL);
  END LOOP;
 CLOSE C1;
EXCEPTION
 WHEN INVALID_CURSOR THEN
   DBMS_OUTPUT.PUT_LINE ('FIRST WE MUST OPEN THE CURSOR');
END;
/

ðŸ”¹ V) CURSOR_ALREADY_OPEN:

ðŸ“˜ Definition:
This exception is raised when you try to open a cursor that is already open.
Oracle returns the error: ORA-06511: cursor already open
To handle this error, we use the predefined exception CURSOR_ALREADY_OPEN in the EXCEPTION block.


EX:

DECLARE
  CURSOR C1 IS SELECT * FROM EMP;
  I EMP%ROWTYPE;
BEGIN
  OPEN C1;
   LOOP
    FETCH C1 INTO I;
    EXIT WHEN C1%NOTFOUND;
     DBMS_OUTPUT.PUT_LINE (I.ENAME||' '||I.SAL);
  END LOOP;
 OPEN C1;
EXCEPTION
 WHEN CURSOR_ALREADY_OPEN THEN
   DBMS_OUTPUT.PUT_LINE ('BEFORE REOPEN WE MUST CLOSE THE CURSOR');
END;
/

ðŸ”¹ VI) INVALID_NUMBER

ðŸ“˜ Definition:
This exception is raised when Oracle tries to convert a string to a number but the string contains non-numeric characters.
It usually happens in SQL statements inside PL/SQL blocks.
Oracle throws the error: ORA-01722: invalid number
To handle this, use the predefined exception: INVALID_NUMBER



EX:

DECLARE
   v_num NUMBER;
BEGIN
   -- Trying to convert a non-numeric string to number

   SELECT TO_NUMBER('abc') INTO v_num FROM DUAL;
   DBMS_OUTPUT.PUT_LINE('Converted Number: ' || v_num);
EXCEPTION
   WHEN INVALID_NUMBER THEN
      DBMS_OUTPUT.PUT_LINE('Error: Cannot convert string to number.');
END;
/

or 

BEGIN
  INSERT INTO EMP (EMPNO, SAL) VALUES (1, 'ABC');
EXCEPTION
  WHEN INVALID_NUMBER THEN
    DBMS_OUTPUT.PUT_LINE ('INSERT PROPER DATA ONLY');
END;
/



ðŸ”¹ VII) VALUE_ERROR Exception

ðŸ“˜ Definition:

Raised when:You try to assign a number or string that is too large for the variable,
Or when you try to convert string to number in PL/SQL (not SQL).
Oracle throws the error: ORA-06502: PL/SQL: numeric or value error
Handled using the exception: VALUE_ERROR


EX:1
--------

DECLARE
 Z NUMBER(5);
BEGIN
 Z := '123456';
  DBMS_OUTPUT.PUT_LINE(Z);
EXCEPTION
 WHEN VALUE_ERROR THEN
  DBMS_OUTPUT.PUT_LINE('VALUE ERROR OCCURRED: CANNOT ASSIGN THIS VALUE.');
END;
/

